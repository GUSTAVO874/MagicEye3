@page "/"
@using MagicEye3.Cliente.Web.Service.IService
@using MagicEye3.Cliente.Web.Models
@using Newtonsoft.Json
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.IdentityModel.Tokens
@using System.Security.Claims
@inject IAuthService _authService
@inject ITokenProvider _tokenProvider

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
@code {
    protected override async Task OnInitializedAsync()
    {
        // LoginRequestDto obj = new();
        // ResponseDto responseDto = await _authService.LoginAsync(obj);
        // if (responseDto != null && responseDto.IsSuccess)
        // {
        //     LoginResponseDto loginResponseDto =
        //         JsonConvert.DeserializeObject<LoginResponseDto>(Convert.ToString(responseDto.Result));

        //     await SignInUser(loginResponseDto);
        //     _tokenProvider.SetToken(loginResponseDto.Token);
        //     //return RedirectToAction("Index", "Home");
        // }
        //else
        //{
        //    TempData["error"] = responseDto.Message;
        //return View(obj);
        //}
    }
    private async Task SignInUser(LoginResponseDto model)
    {
        // var handler = new JwtSecurityTokenHandler();

        // var jwt = handler.ReadJwtToken(model.Token);

        // //dice que CookieAuthenticationDefaults no existe en el contexto actual
        // var identity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme);
        // identity.AddClaim(new Claim(JwtRegisteredClaimNames.Email,
        //     jwt.Claims.FirstOrDefault(u => u.Type == JwtRegisteredClaimNames.Email).Value));
        // identity.AddClaim(new Claim(JwtRegisteredClaimNames.Sub,
        //     jwt.Claims.FirstOrDefault(u => u.Type == JwtRegisteredClaimNames.Sub).Value));
        // identity.AddClaim(new Claim(JwtRegisteredClaimNames.Name,
        //     jwt.Claims.FirstOrDefault(u => u.Type == JwtRegisteredClaimNames.Name).Value));

        // //con estas líneas ya se puede decorar las apis con el rol para el acceso
        // identity.AddClaim(new Claim(ClaimTypes.Name,
        //     jwt.Claims.FirstOrDefault(u => u.Type == JwtRegisteredClaimNames.Email).Value));
        // identity.AddClaim(new Claim(ClaimTypes.Role,
        //     jwt.Claims.FirstOrDefault(u => u.Type == "role").Value));



        // var principal = new ClaimsPrincipal(identity);
        // //dice que HttpContext no existe en el contexto actual
        // await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
    }

}

// <auto-generated />
using System;
using MagicEye3.Services.BackEndAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MagicEye3.Services.BackEndAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241027033645_creadb3")]
    partial class creadb3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Actividad", b =>
                {
                    b.Property<int>("ActividadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActividadId"));

                    b.Property<int>("EvaluacionId")
                        .HasColumnType("int");

                    b.Property<int?>("EvaluacionId1")
                        .HasColumnType("int");

                    b.Property<int>("Tiempo")
                        .HasColumnType("int");

                    b.HasKey("ActividadId");

                    b.HasIndex("EvaluacionId");

                    b.HasIndex("EvaluacionId1");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Carrera", b =>
                {
                    b.Property<int>("CarreraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarreraId"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarreraId");

                    b.ToTable("Carreras");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Componente", b =>
                {
                    b.Property<int>("ComponenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponenteId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponenteId");

                    b.ToTable("Componentes");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.ComponenteActividad", b =>
                {
                    b.Property<int>("ComponenteId")
                        .HasColumnType("int");

                    b.Property<int>("ActividadId")
                        .HasColumnType("int");

                    b.HasKey("ComponenteId", "ActividadId");

                    b.HasIndex("ActividadId");

                    b.ToTable("ComponenteActividades");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Contenido", b =>
                {
                    b.Property<int>("ContenidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContenidoId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnidadId")
                        .HasColumnType("int");

                    b.HasKey("ContenidoId");

                    b.HasIndex("UnidadId");

                    b.ToTable("Contenidos");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.ContenidoComponente", b =>
                {
                    b.Property<int>("ContenidoId")
                        .HasColumnType("int");

                    b.Property<int>("ComponenteId")
                        .HasColumnType("int");

                    b.HasKey("ContenidoId", "ComponenteId");

                    b.HasIndex("ComponenteId");

                    b.ToTable("ContenidoComponentes");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Evaluacion", b =>
                {
                    b.Property<int>("EvaluacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluacionId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvaluacionId");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Fecha", b =>
                {
                    b.Property<int>("FechaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FechaId"));

                    b.Property<DateOnly>("laFecha")
                        .HasColumnType("date");

                    b.HasKey("FechaId");

                    b.ToTable("Fechas");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.FechaContenido", b =>
                {
                    b.Property<int>("ContenidoId")
                        .HasColumnType("int");

                    b.Property<int>("FechaId")
                        .HasColumnType("int");

                    b.HasKey("ContenidoId", "FechaId");

                    b.HasIndex("FechaId");

                    b.ToTable("FechaContenidos");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Grupo", b =>
                {
                    b.Property<int>("GrupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GrupoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("int");

                    b.HasKey("GrupoId");

                    b.HasIndex("PeriodoId");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Parcial", b =>
                {
                    b.Property<int>("ParcialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcialId"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParcialId");

                    b.ToTable("Parciales");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Periodo", b =>
                {
                    b.Property<int>("PeriodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodoId"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PeriodoId");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Silabo", b =>
                {
                    b.Property<int>("SilaboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SilaboId"));

                    b.Property<int>("CarreraId")
                        .HasColumnType("int");

                    b.Property<int?>("CarreraId1")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParcialId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodoId1")
                        .HasColumnType("int");

                    b.HasKey("SilaboId");

                    b.HasIndex("CarreraId");

                    b.HasIndex("CarreraId1");

                    b.HasIndex("ParcialId");

                    b.HasIndex("PeriodoId");

                    b.HasIndex("PeriodoId1");

                    b.ToTable("Silabos");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.SilaboParcial", b =>
                {
                    b.Property<int>("SilaboId")
                        .HasColumnType("int");

                    b.Property<int>("ParcialId")
                        .HasColumnType("int");

                    b.HasKey("SilaboId", "ParcialId");

                    b.HasIndex("ParcialId");

                    b.ToTable("SilaboParciales");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Unidad", b =>
                {
                    b.Property<int>("UnidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnidadId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SilaboId")
                        .HasColumnType("int");

                    b.HasKey("UnidadId");

                    b.HasIndex("SilaboId");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Actividad", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Evaluacion", null)
                        .WithMany()
                        .HasForeignKey("EvaluacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Evaluacion", null)
                        .WithMany("Actividades")
                        .HasForeignKey("EvaluacionId1");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.ComponenteActividad", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Actividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Componente", "Componente")
                        .WithMany()
                        .HasForeignKey("ComponenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("Componente");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Contenido", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Unidad", null)
                        .WithMany("Contenidos")
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.ContenidoComponente", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Componente", "Componente")
                        .WithMany()
                        .HasForeignKey("ComponenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Contenido", "Contenido")
                        .WithMany()
                        .HasForeignKey("ContenidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Componente");

                    b.Navigation("Contenido");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.FechaContenido", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Contenido", "Contenido")
                        .WithMany()
                        .HasForeignKey("ContenidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Fecha", "Fecha")
                        .WithMany()
                        .HasForeignKey("FechaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contenido");

                    b.Navigation("Fecha");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Grupo", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Periodo", null)
                        .WithMany("Grupos")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Silabo", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Carrera", null)
                        .WithMany()
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Carrera", null)
                        .WithMany("Silabos")
                        .HasForeignKey("CarreraId1");

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Parcial", null)
                        .WithMany()
                        .HasForeignKey("ParcialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Periodo", null)
                        .WithMany()
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Periodo", null)
                        .WithMany("Silabos")
                        .HasForeignKey("PeriodoId1");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.SilaboParcial", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Parcial", "Parcial")
                        .WithMany()
                        .HasForeignKey("ParcialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Silabo", "Silabo")
                        .WithMany()
                        .HasForeignKey("SilaboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcial");

                    b.Navigation("Silabo");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Unidad", b =>
                {
                    b.HasOne("MagicEye3.Services.BackEndAPI.Models.Silabo", null)
                        .WithMany()
                        .HasForeignKey("SilaboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Carrera", b =>
                {
                    b.Navigation("Silabos");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Evaluacion", b =>
                {
                    b.Navigation("Actividades");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Periodo", b =>
                {
                    b.Navigation("Grupos");

                    b.Navigation("Silabos");
                });

            modelBuilder.Entity("MagicEye3.Services.BackEndAPI.Models.Unidad", b =>
                {
                    b.Navigation("Contenidos");
                });
#pragma warning restore 612, 618
        }
    }
}
